# backend/app.py

import matplotlib
matplotlib.use('Agg')  # Use a non-GUI backend for MPL so it doesn’t open windows on macOS

from flask import Flask, request, send_file, abort, jsonify
from flask_cors import CORS
import yfinance as yf
import mplfinance as mpf
import io

app = Flask(__name__)
CORS(app)

@app.route('/api/ping')
def ping():
    return jsonify({'pong': True})

@app.route('/api/chart')
def chart():
    # Parse query parameters
    ticker   = request.args.get('ticker',   'SPY')
    period   = request.args.get('period',   '1mo')
    interval = request.args.get('interval', '1d')

    print(f">>> CHART HIT: ticker={ticker}, period={period}, interval={interval}")

    # Fetch OHLCV data
    df = yf.Ticker(ticker).history(period=period, interval=interval)
    print("    DataFrame shape:", df.shape)
    if df.empty:
        print(">>> No data returned, aborting with 404")
        return abort(404, f"No data for {ticker} ({period}, {interval})")

    # Render a candlestick chart into a PNG in memory
    buf = io.BytesIO()
    mpf.plot(
        df,
        type='candle',
        style='charles',
        title=f"{ticker} {interval} — last {period}",
        ylabel='Price (USD)',
        savefig=dict(fname=buf, format='png', dpi=110)
    )
    buf.seek(0)

    # Send the PNG back to the client
    return send_file(buf, mimetype='image/png')

if __name__ == '__main__':
    # Change to port=8000 if 5000 is in use
    app.run(host='0.0.0.0', port=8000, debug=True)